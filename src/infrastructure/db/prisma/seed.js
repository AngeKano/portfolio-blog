  // infrastructure/db/prisma/seed.ts
  // import { PrismaClient } from '@prisma/client';
  // import { PasswordService } from '../../services/auth/PasswordService';

  // const prisma = new PrismaClient();
  const { PrismaClient } = require('@prisma/client');
  const bcrypt = require('bcryptjs');
  
  const prisma = new PrismaClient();
  
  // Cr√©ez une version simplifi√©e de votre PasswordService
  const PasswordService = {
    async hashPassword(plainPassword) {
      const salt = await bcrypt.genSalt(12);
      return bcrypt.hash(plainPassword, salt);
    }
  };

  async function main() {
    console.log('üå± D√©but du seeding de la base de donn√©es...');

    // Nettoyer la base de donn√©es (en d√©veloppement uniquement)
    if (process.env.NODE_ENV !== 'production') {
      await cleanDatabase();
    }

    // Cr√©er l'utilisateur admin par d√©faut
    const hashedPassword = await PasswordService.hashPassword('admin12345');
    
    const admin = await prisma.user.upsert({
      where: { email: 'admin@example.com' },
      update: {},
      create: {
        email: 'admin@example.com',
        name: 'Administrateur',
        password: hashedPassword,
        role: 'ADMIN',
        social: {
          github: 'https://github.com/your-username',
          linkedin: 'https://linkedin.com/in/your-profile',
        },
      },
    });
    
    console.log(`üîë Utilisateur admin cr√©√©: ${admin.email}`);

    // Cr√©er quelques comp√©tences
    const skills = [
      { name: 'Next.js', category: 'FRONTEND', tags: ['FRAMEWORK', 'REACT', 'JAVASCRIPT'] },
      { name: 'React', category: 'FRONTEND', tags: ['LIBRARY', 'JAVASCRIPT', 'UI'] },
      { name: 'Node.js', category: 'BACKEND', tags: ['RUNTIME', 'JAVASCRIPT', 'SERVER'] },
      { name: 'PostgreSQL', category: 'DATABASE', tags: ['SQL', 'RELATIONAL'] },
      { name: 'AWS', category: 'DEVOPS', tags: ['CLOUD', 'DEPLOYMENT'] },
      { name: 'Docker', category: 'DEVOPS', tags: ['CONTAINERIZATION', 'DEPLOYMENT'] },
    ];

    for (const skill of skills) {
      await prisma.skill.upsert({
        where: { 
          // Cr√©er un identifiant unique bas√© sur le nom (dans un environnement r√©el, utilisez une cl√© primaire appropri√©e)
          id: `seeded-${skill.name.toLowerCase().replace(/\s+/g, '-')}` 
        },
        update: skill,
        create: {
          ...skill,
          id: `seeded-${skill.name.toLowerCase().replace(/\s+/g, '-')}`,
        },
      });
    }

    console.log(`üìä ${skills.length} comp√©tences cr√©√©es`);

    // Cr√©er quelques exp√©riences professionnelles
    const experiences = [
      {
        title: 'D√©veloppeur Full-Stack',
        company: 'TechCorp',
        description: 'D√©veloppement d\'applications web avec React, Node.js et PostgreSQL.',
        startDate: new Date('2021-01-01'),
        endDate: null, // Emploi actuel
        skills: ['React', 'Node.js', 'PostgreSQL'],
        link: 'https://techcorp.com',
      },
      {
        title: 'D√©veloppeur Front-End',
        company: 'WebAgency',
        description: 'Cr√©ation d\'interfaces utilisateur r√©actives et attrayantes.',
        startDate: new Date('2019-05-01'),
        endDate: new Date('2020-12-31'),
        skills: ['HTML', 'CSS', 'JavaScript', 'React'],
        link: 'https://webagency.com',
      },
    ];

    for (const experience of experiences) {
      await prisma.experience.upsert({
        where: { 
          id: `seeded-${experience.company.toLowerCase().replace(/\s+/g, '-')}` 
        },
        update: experience,
        create: {
          ...experience,
          id: `seeded-${experience.company.toLowerCase().replace(/\s+/g, '-')}`,
        },
      });
    }

    console.log(`üíº ${experiences.length} exp√©riences cr√©√©es`);

    // Cr√©er quelques articles d'exemple
    const articles = [
      {
        title: 'Comment cr√©er un portfolio avec Next.js',
        description: 'Un guide complet pour cr√©er un portfolio moderne avec Next.js et Tailwind CSS.',
        content: `
  # Comment cr√©er un portfolio avec Next.js

  Next.js est un framework React qui vous permet de cr√©er des applications web performantes et optimis√©es pour le r√©f√©rencement.

  ## Pourquoi choisir Next.js ?

  - **Rendu c√¥t√© serveur** : Am√©liore les performances et le SEO
  - **Routage int√©gr√©** : Simplification de la navigation
  - **√âcosyst√®me riche** : Nombreuses int√©grations disponibles

  ## √âtapes pour cr√©er votre portfolio

  1. Installer Next.js et configurer le projet
  2. Cr√©er les principales pages et composants
  3. Styliser avec Tailwind CSS
  4. D√©ployer sur Vercel ou un autre service d'h√©bergement

  ...et bien plus encore dans cet article !
        `,
        published: true,
        publishedAt: new Date('2025-07-15'),
        links: {
          github: 'https://github.com/example/nextjs-portfolio',
          demo: 'https://portfolio-demo.vercel.app',
        },
        tags: ['Next.js', 'React', 'Portfolio', 'Tutorial'],
        authorId: admin.id,
      },
      {
        title: 'L\'importance de la Clean Architecture dans les projets modernes',
        description: 'D√©couvrez comment la Clean Architecture peut am√©liorer la maintenabilit√© de vos projets.',
        content: `
  # L'importance de la Clean Architecture

  La Clean Architecture est une approche de d√©veloppement logiciel qui met l'accent sur la s√©paration des pr√©occupations et la cr√©ation de syst√®mes ind√©pendants des frameworks.

  ## Principes fondamentaux

  - **Ind√©pendance des frameworks** : Votre logique m√©tier ne doit pas d√©pendre de biblioth√®ques externes
  - **Testabilit√©** : Facilite l'√©criture de tests unitaires
  - **Ind√©pendance de l'interface utilisateur** : Possibilit√© de changer l'UI sans modifier la logique

  ## Mise en place dans un projet Next.js

  La structure que nous avons adopt√©e pour ce portfolio-blog est un excellent exemple de Clean Architecture appliqu√©e √† un projet Next.js.

  ...et bien plus encore dans cet article !
        `,
        published: true,
        publishedAt: new Date('2025-09-20'),
        tags: ['Clean Architecture', 'Best Practices', 'Software Design'],
        authorId: admin.id,
      },
    ];

    for (const article of articles) {
      await prisma.article.upsert({
        where: { 
          id: `seeded-${article.title.toLowerCase().substring(0, 20).replace(/\s+/g, '-')}` 
        },
        update: article,
        create: {
          ...article,
          id: `seeded-${article.title.toLowerCase().substring(0, 20).replace(/\s+/g, '-')}`,
        },
      });
    }

    console.log(`üìù ${articles.length} articles cr√©√©s`);

    // Cr√©er quelques projets d'exemple
    const projects = [
      {
        title: 'Portfolio Blog',
        description: 'Un portfolio personnel et blog avec Next.js, PostgreSQL et Clean Architecture.',
        content: `
  # Portfolio Blog

  Ce projet est un portfolio et blog personnel construit avec les technologies modernes et suivant les principes de la Clean Architecture.

  ## Technologies utilis√©es

  - **Frontend** : Next.js, React, Tailwind CSS
  - **Backend** : Next.js API Routes, tRPC
  - **Base de donn√©es** : PostgreSQL avec Prisma
  - **Authentication** : NextAuth.js

  ## Fonctionnalit√©s

  - Blog avec articles et commentaires
  - Pr√©sentation de projets
  - Section comp√©tences
  - Exp√©riences professionnelles
  - Authentification pour admin et visiteurs

  ## Captures d'√©cran

  [Des captures d'√©cran seraient incluses ici]
        `,
        startDate: new Date('2023-01-01'),
        endDate: new Date('2023-03-15'),
        links: {
          github: 'https://github.com/example/portfolio-blog',
          live: 'https://portfolio-blog-example.com',
        },
        technologies: ['Next.js', 'React', 'PostgreSQL', 'Prisma', 'Tailwind CSS'],
        tags: ['Portfolio', 'Blog', 'Full-Stack'],
        authorId: admin.id,
      },
      {
        title: 'E-commerce Dashboard',
        description: 'Tableau de bord d\'administration pour une plateforme e-commerce.',
        content: `
  # E-commerce Dashboard

  Un tableau de bord complet pour g√©rer une boutique en ligne, incluant la gestion des produits, des commandes et des clients.

  ## Technologies utilis√©es

  - **Frontend** : React avec Redux
  - **Backend** : Node.js, Express
  - **Base de donn√©es** : MongoDB
  - **Authentication** : JWT

  ## Fonctionnalit√©s

  - Gestion des produits (CRUD)
  - Suivi des commandes et des statuts
  - Analytique des ventes
  - Gestion des clients

  ## Architecture

  Le projet suit une architecture microservices pour permettre une √©volutivit√© facile et une maintenance simplifi√©e.

  ## Captures d'√©cran

  [Des captures d'√©cran seraient incluses ici]
        `,
        startDate: new Date('2022-06-01'),
        endDate: new Date('2022-11-30'),
        links: {
          github: 'https://github.com/example/ecommerce-dashboard',
        },
        technologies: ['React', 'Redux', 'Node.js', 'Express', 'MongoDB'],
        tags: ['E-commerce', 'Dashboard', 'MERN Stack'],
        authorId: admin.id,
      },
    ];

    for (const project of projects) {
      await prisma.project.upsert({
        where: { 
          id: `seeded-${project.title.toLowerCase().substring(0, 20).replace(/\s+/g, '-')}` 
        },
        update: project,
        create: {
          ...project,
          id: `seeded-${project.title.toLowerCase().substring(0, 20).replace(/\s+/g, '-')}`,
        },
      });
    }

    console.log(`üöÄ ${projects.length} projets cr√©√©s`);

    // Cr√©er quelques visiteurs
    const visitors = [
      { email: 'visitor1@example.com' },
      { email: 'visitor2@example.com' },
      { email: 'visitor3@example.com' },
    ];

    for (const visitor of visitors) {
      await prisma.visitor.upsert({
        where: { email: visitor.email },
        update: {},
        create: visitor,
      });
    }

    console.log(`üë• ${visitors.length} visiteurs cr√©√©s`);

    console.log('‚úÖ Seeding termin√© avec succ√®s!');
  }

  // Fonction pour nettoyer la base de donn√©es (√† utiliser avec pr√©caution)
  async function cleanDatabase() {
    console.log('üßπ Nettoyage de la base de donn√©es...');
    
    // Supprimer les donn√©es dans l'ordre appropri√© pour respecter les contraintes de cl√© √©trang√®re
    await prisma.comment.deleteMany();
    await prisma.article.deleteMany();
    await prisma.project.deleteMany();
    await prisma.experience.deleteMany();
    await prisma.skill.deleteMany();
    await prisma.account.deleteMany();
    await prisma.session.deleteMany();
    await prisma.user.deleteMany();
    await prisma.visitor.deleteMany();
    // Retirer ou commenter cette ligne:
    // await prisma.verificationToken.deleteMany();
    
    console.log('üßπ Nettoyage termin√©');
  }

  // Ex√©cuter le seed
  main()
  .catch((e) => {
    console.error('‚ùå Erreur lors du seeding:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
    
//     ------------

//     const { PrismaClient } = require('@prisma/client');
// const bcrypt = require('bcryptjs');

// const prisma = new PrismaClient();

// // Cr√©ez une version simplifi√©e de votre PasswordService
// const PasswordService = {
//   async hashPassword(plainPassword) {
//     const salt = await bcrypt.genSalt(12);
//     return bcrypt.hash(plainPassword, salt);
//   }
// };

// async function main() {
//   console.log('üå± D√©but du seeding de la base de donn√©es...');

//   // Le reste du code de votre seed...
//   // Assurez-vous de convertir tout en syntaxe CommonJS
// }

// // Ex√©cuter le seed
// main()
//   .catch((e) => {
//     console.error('‚ùå Erreur lors du seeding:', e);
//     process.exit(1);
//   })
//   .finally(async () => {
//     await prisma.$disconnect();
//   });
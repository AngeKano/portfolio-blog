generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("VISITOR")
  social        Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  articles      Article[]
  projects      Project[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Visitor {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id          String    @id @default(cuid())
  title       String
  description String
  content     String
  image       String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  links       Json?
  likes       Int       @default(0)
  views       Int       @default(0)
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tags        String[]
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
}

model Project {
  id           String    @id @default(cuid())
  title        String
  description  String
  content      String
  image        String?
  video        String?
  startDate    DateTime
  endDate      DateTime?
  links        Json?
  technologies String[]
  likes        Int       @default(0)
  views        Int       @default(0)
  authorId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tags         String[]
  comments     Comment[]
  author       User      @relation(fields: [authorId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  email     String
  name      String?
  createdAt DateTime @default(now())
  articleId String?
  projectId String?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  category  String
  image     String?
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experience {
  id          String    @id @default(cuid())
  title       String
  description String
  company     String
  startDate   DateTime
  endDate     DateTime?
  link        String?
  skills      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
